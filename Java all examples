import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

public class EverydayJavaExamples {

    public static void main(String[] args) {
        // Java If...Else
        int temperature = 95;
        int pressure = 101;

        if (temperature >= 100 && pressure >= 100) {
            System.out.println("The kettle is boiling!");
        } else {
            System.out.println("Not ready yet, please wait.");
        }

        System.out.println();

        // Java Switch
        String code = "F2";

        switch (code) {
            case "F1":
                System.out.println("Fantasy");
                break;
            case "F2":
                System.out.println("Science Fiction");
                break;
            case "N1":
                System.out.println("Novel");
                break;
            default:
                System.out.println("Unknown genre");
        }

        System.out.println();

        // Java While Loop
        int batteryLevel = 100;

        while (batteryLevel > 20) {
            System.out.println("Battery level: " + batteryLevel + "%");
            batteryLevel -= 15;
        }
        System.out.println("Warning: low battery!");

        System.out.println();

        // Java For Loop
        String[] ingredients = {"Rose petal", "Fairy dust", "Dragon tear"};

        for (int i = 0; i < ingredients.length; i++) {
            System.out.println("Ingredient " + (i + 1) + ": " + ingredients[i]);
        }

        System.out.println();

        // Java Break/Continue
        String[] findings = {"stone", "feather", "rare amulet", "coin"};

        for (String item : findings) {
            if (item.equals("rare amulet")) {
                System.out.println("Artifact found: " + item);
                break;
            }
        }

        System.out.println();

        // Java Arrays
        int[] temperatures = {23, 21, 19, 18, 20};

        for (int t : temperatures) {
            System.out.println("Temperature: " + t + "°C");
        }

        System.out.println();

        // Java Methods
        String password = generatePassword();
        System.out.println("Random password: " + password);

        System.out.println();

        // Java Method Parameters
        String risk = riskLevel(80, 5);
        System.out.println("Zone risk: " + risk);

        System.out.println();

        // Java Method Overloading
        int storageInKB = storageVolume(2048);
        int storageInBytes = storageVolume(2, "MB");
        System.out.println("Storage in KB: " + storageInKB);
        System.out.println("Storage in Bytes: " + storageInBytes);

        System.out.println();

        // Java Scope
        int bonusPoints = 100;
        updatePoints(); // calls method with local variable
        System.out.println("Global bonus points: " + bonusPoints);

        System.out.println();

        // Java Recursion
        int height = towerHeight(5);
        System.out.println("Tower height: " + height + " levels");

        System.out.println();

        // Java ArrayList
        ArrayList<String> quests = new ArrayList<>();
        quests.add("Find the ancient scroll");
        quests.add("Defeat the ice golem");
        quests.add("Open the portal");

        System.out.println("Quest list:");
        for (String quest : quests) {
            System.out.println("- " + quest);
        }

        System.out.println();

        // Java LinkedList
        LinkedList<String> timeline = new LinkedList<>();
        timeline.add("Woke up");
        timeline.add("Explored the ruins");
        timeline.addFirst("Dream");
        timeline.addLast("Returned home");

        System.out.println("Timeline:");
        for (String event : timeline) {
            System.out.println("> " + event);
        }

        System.out.println();

        // Java List Sorting
        ArrayList<Integer> energyLevels = new ArrayList<>();
        energyLevels.add(42);
        energyLevels.add(75);
        energyLevels.add(23);
        energyLevels.add(90);

        Collections.sort(energyLevels);
        System.out.println("Energy levels sorted:");
        for (int level : energyLevels) {
            System.out.println(level + " units");
        }

        System.out.println();

        // Java HashMap
        HashMap<String, String> spellBook = new HashMap<>();
        spellBook.put("Ignis", "Fireball");
        spellBook.put("Aqua", "Water stream");
        spellBook.put("Terra", "Earthquake");

        System.out.println("Spellbook:");
        for (String key : spellBook.keySet()) {
            System.out.println(key + ": " + spellBook.get(key));
        }

        System.out.println();

        // Java HashSet
        HashSet<String> relics = new HashSet<>();
        relics.add("Sun Amulet");
        relics.add("Crystal of Darkness");
        relics.add("Crystal of Darkness"); // duplicate won't be added

        System.out.println("Unique relics:");
        for (String relic : relics) {
            System.out.println(relic);
        }

        System.out.println();

        // Java Iterator
        ArrayList<String> scrolls = new ArrayList<>();
        scrolls.add("Lightning Scroll");
        scrolls.add("Shield Scroll");
        scrolls.add("Invisibility Scroll");

        Iterator<String> scrollIterator = scrolls.iterator();
        System.out.println("Reading scrolls:");
        while (scrollIterator.hasNext()) {
            String scroll = scrollIterator.next();
            System.out.println(">> " + scroll);
        }

        System.out.println();

        // Java Wrapper Classes
        Integer mana = 120;
        Double precision = 85.5;
        Boolean isInvisible = true;

        System.out.println("Character stats:");
        System.out.println("Mana: " + mana);
        System.out.println("Precision: " + precision);
        System.out.println("Invisibility active: " + isInvisible);
    }

    // Method to generate a password
    public static String generatePassword() {
        return "Xy" + (int)(Math.random() * 10000);
    }

    // Method with parameters
    public static String riskLevel(int radiation, int hours) {
        if (radiation * hours > 300) {
            return "High risk!";
        } else {
            return "Minimal risk.";
        }
    }

    // Overloaded methods
    public static int storageVolume(int bytes) {
        return bytes / 1024;
    }

    public static int storageVolume(int size, String unit) {
        if (unit.equals("MB")) {
            return size * 1024;
        }
        return size;
    }

    // Method demonstrating variable scope
    public static void updatePoints() {
        int bonusPoints = 50;
        System.out.println("Local bonus points: " + bonusPoints);
    }

    // Recursion example
    public static int towerHeight(int levels) {
        if (levels == 1) return 1;
        return 1 + towerHeight(levels - 1);
    }
}
        // Java ArrayList
        ArrayList<String> quests = new ArrayList<>();
        quests.add("Найти древний свиток");
        quests.add("Победить ледяного голема");
        quests.add("Открыть портал");

        System.out.println("\nСписок квестов:");
        for (String quest : quests) {
            System.out.println("- " + quest);
        }

        // Java LinkedList
        LinkedList<String> timeline = new LinkedList<>();
        timeline.add("Пробуждение");
        timeline.add("Исследование руин");
        timeline.addFirst("Сон");
        timeline.addLast("Возвращение домой");

        System.out.println("\nХронология:");
        for (String event : timeline) {
            System.out.println("> " + event);
        }

        // Java List Sorting
        ArrayList<Integer> energyLevels = new ArrayList<>();
        energyLevels.add(42);
        energyLevels.add(75);
        energyLevels.add(23);
        energyLevels.add(90);

        Collections.sort(energyLevels);
        System.out.println("\nУровни энергии по возрастанию:");
        for (int level : energyLevels) {
            System.out.println(level + " ед.");
        }

        // Java HashMap
        HashMap<String, String> spellBook = new HashMap<>();
        spellBook.put("Ignis", "Огненный шар");
        spellBook.put("Aqua", "Водяной поток");
        spellBook.put("Terra", "Землетрясение");

        System.out.println("\nКнига заклинаний:");
        for (String key : spellBook.keySet()) {
            System.out.println(key + ": " + spellBook.get(key));
        }

        // Java HashSet
        HashSet<String> relics = new HashSet<>();
        relics.add("Амулет Солнца");
        relics.add("Кристалл Тьмы");
        relics.add("Кристалл Тьмы"); // дубликат — не добавится

        System.out.println("\nУникальные реликвии:");
        for (String relic : relics) {
            System.out.println(relic);
        }

        // Java Iterator
        ArrayList<String> scrolls = new ArrayList<>();
        scrolls.add("Свиток молнии");
        scrolls.add("Свиток защиты");
        scrolls.add("Свиток невидимости");

        Iterator<String> scrollIterator = scrolls.iterator();
        System.out.println("\nЧтение свитков:");
        while (scrollIterator.hasNext()) {
            String scroll = scrollIterator.next();
            System.out.println(">> " + scroll);
        }

        // Java Wrapper Classes
        Integer mana = 120;     // int в Integer
        Double precision = 85.5; // double в Double
        Boolean isInvisible = true; // boolean в Boolean

        System.out.println("\nХарактеристики:");
        System.out.println("Мана: " + mana);
        System.out.println("Точность: " + precision);
        System.out.println("Невидимость активна: " + isInvisible);
1. Пример с доставкой еды (Инкапсуляция)**

class Delivery {
    private String courierName;
    private String restaurant;
    private String destination;

    public Delivery(String courierName, String restaurant, String destination) {
        this.courierName = courierName;
        this.restaurant = restaurant;
        this.destination = destination;
    }

    public void pickUpOrder() {
        System.out.println(courierName + " picked up an order from " + restaurant);
    }

    public void deliverOrder() {
        System.out.println(courierName + " is delivering to " + destination);
    }
}

public class Main {
    public static void main(String[] args) {
        Delivery delivery = new Delivery("Adilet", "Burger King", "Pushkina 11");
        delivery.pickUpOrder();
        delivery.deliverOrder();
    }
}


2. Пример с умными часами и наследованием (SmartWatch и Tracker пульса)**


import java.util.Random;

class Device {
    String brand;

    void turnOn() {
        System.out.println(brand + " is now on.");
        try {
            Thread.sleep(5000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class SmartWatch extends Device {
    void trackHeartRate() {
        System.out.println("Measuring heart rate...");
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        Random rand = new Random();
        int bpm = 60 + rand.nextInt(40);
        System.out.println("Heart Rate: " + bpm + " bpm");
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        SmartWatch watch = new SmartWatch();
        watch.brand = "Apple Watch";
        watch.turnOn();
        watch.trackHeartRate();
    }
}
3. Пример с арендами скутеров (Системы классов и объектов)**
java
class Scooter {
    String id;
    int battery;
    boolean isRented;

    void rent() {
        if (battery > 20) {
            System.out.println("Scooter " + id + " is rented.");
            isRented = true;
        } else {
            System.out.println("Scooter " + id + " Battery too low to rent.");
        }
    }

    void status() {
        System.out.println("Scooter " + id + " | Battery: " + battery + "% | Rented: " + isRented);
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Scooter scooter = new Scooter();
        scooter.id = "X1";
        scooter.battery = 42;
        scooter.rent();
        scooter.status();
    }
}


 4. Пример с системой бронирования событий**


class EventBooking {
    String eventName;
    int numberOfTickets;
    boolean isBooked;

    public EventBooking(String eventName, int numberOfTickets) {
        if (numberOfTickets > 0) {
            this.eventName = eventName;
            this.numberOfTickets = numberOfTickets;
            this.isBooked = true;
        } else {
            System.out.println("Invalid number of tickets!");
            this.isBooked = false;
        }
    }

    void showBookingDetails() {
        if (isBooked) {
            System.out.println("Booking for " + eventName + " | Tickets: " + numberOfTickets);
        } else {
            System.out.println("No tickets booked.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        EventBooking booking = new EventBooking("Concert", 3);
        booking.showBookingDetails();

        EventBooking invalidBooking = new EventBooking("Concert", -2);
        invalidBooking.showBookingDetails();
    }
}
5. Пример с банковским счетом (private и public)**


class BankAccount {
    private double balance;

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: $" + amount);
        } else {
            System.out.println("Invalid amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount <= balance && amount > 0) {
            balance -= amount;
            System.out.println("Withdrew: $" + amount);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        account.deposit(500);
        account.withdraw(200);
        System.out.println("Current balance: $" + account.getBalance());
    }

6. Пример с системой самоуправляемого автомобиля (отображение статуса)**


class SelfDrivingCar {
    String location;
    int speed;
    boolean autopilotEnabled;

    void showStatus() {
        System.out.println("Location: " + location);
        System.out.println("Speed: " + speed + " km/h | Autopilot: " + autopilotEnabled);
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        SelfDrivingCar car = new SelfDrivingCar();
        car.location = "Downtown";
        car.speed = 0;
        car.autopilotEnabled = false;
        car.showStatus();
        Thread.sleep(1000);

        car.speed = 50;
        car.autopilotEnabled = true;
        car.location = "Mangiilik El";
        car.showStatus();
    }
}
```

7. Пример с системой умной охраны (Ночной режим)**

```java
class SecuritySystem {
    String mode;
    boolean motionDetected;
    int camerasOnline;

    void status() {
        System.out.println("Mode: " + mode);
        System.out.println("Motion Detected: " + motionDetected);
        System.out.println("Cameras Online: " + camerasOnline);
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        SecuritySystem system = new SecuritySystem();
        system.mode = "Night";
        system.motionDetected = false;
        system.camerasOnline = 5;
        system.status();

        // Кто-то двигается
        system.motionDetected = true;
        system.camerasOnline = 4;
        system.status();
    }
}
8. Пример с приложением для такси (Калькуляция стоимости поездки)**

```java
class Ride {
    double baseFare = 700;
    double pricePerKm = 120;

    double calculateFare(double km, boolean isNight) {
        double fare = baseFare + (pricePerKm * km);
        if (isNight) {
            fare = fare * 1.5;  // Увеличение стоимости ночью
        }
        return fare;
    }
}

public class Main {
    public static void main(String[] args) {
        Ride ride = new Ride();
        double price = ride.calculateFare(8.5, true);
        System.out.println("Ride fare: $" + price);
    }
}
9. Пример с сервисом стриминга (Рекомендация плана подписки)**

class SubscriptionAdvisor {
    String recommendPlan(int hoursPerWeek) {
        if (hoursPerWeek < 3) return "Basic Plan";
        else if (hoursPerWeek <= 10) return "Standard Plan";
        else return "Premium Plan";
    }
}

public class Main {
    public static void main(String[] args) {
        SubscriptionAdvisor advisor = new SubscriptionAdvisor();
        String plan = advisor.recommendPlan(12);
        System.out.println("Recommended: " + plan);
    }
}
```

10. Пример с системой аренды автомобилей (Сложная логика конструктора)**


class CarRental {
    String carModel;
    boolean isAvailable;
    double rentalPricePerDay;

    public CarRental(String carModel, boolean isAvailable) {
        this.carModel = carModel;
        this.isAvailable = isAvailable;
        if (isAvailable) {
            this.rentalPricePerDay = 50.0; // Если машина доступна, устанавливаем цену.
        } else {
            this.rentalPricePerDay = 0; // Если машина недоступна, цена равна нулю.
        }
    }

    void showRentalInfo() {
        System.out.println("Car Model: " + carModel);
        System.out.println("Available: " + isAvailable + " | Price per day: $" + rentalPricePerDay);
    }
}

public class Main {
    public static void main(String[] args) {
        CarRental car1 = new CarRental("Toyota Corolla", true);
        car1.showRentalInfo();

        CarRental car2 = new CarRental("BMW X5", false);
        car2.showRentalInfo();
    }
}
11. Пример с системой бронирования событий (Проверка валидности)**


class EventBooking {
    String eventName;
    int numberOfTickets;
    boolean isBooked;

    public EventBooking(String eventName, int numberOfTickets) {
        if (numberOfTickets > 0) {
            this.eventName = eventName;
            this.numberOfTickets = numberOfTickets;
            this.isBooked = true;
        } else {
            System.out.println("Invalid number of tickets!");
            this.isBooked = false;
        }
    }

    void showBookingDetails() {
        if (isBooked) {
            System.out.println("Booking for " + eventName + " | Tickets: " + numberOfTickets);
        } else {
            System.out.println("No tickets booked.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        EventBooking booking = new EventBooking("Concert", 3);
        booking.showBookingDetails();

        EventBooking invalidBooking = new EventBooking("Concert", -2);
        invalidBooking.showBookingDetails();
    }
}
12. Пример с системой банковских счетов (private и public)**


class BankAccount {
    private double balance;

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: $" + amount);
        } else {
            System.out.println("Invalid amount.");
        }
    }

    public void withdraw(double amount) {
        if (amount <= balance && amount > 0) {
            balance -= amount;
            System.out.println("Withdrew: $" + amount);
        } else {
            System.out.println("Insufficient funds or invalid amount.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount();
        account.deposit(500);
        account.withdraw(200);
        System.out.println("Current balance: $" + account.getBalance());
    }
}
